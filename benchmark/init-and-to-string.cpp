#include <chrono>
#include <iostream>

#include "../core.hpp"

#define RUNS 10

int main() {

    std::string subject =
        "10111100001110011101011011000010011100111011101111001110010100000100101100001010111100100111101111111100001110"
        "01100011111110101100000000110010010101111001100001101011000110000000111011000110001011000110111111110001000110"
        "10100010011000100000000110001000000011011011110111101010100010111011100010001100111011011010011101111010100011"
        "01101110011000110010001101101101101101110001111001000001000111100100100011011100011001011100101110100000001100"
        "01101111001100011101101101101100110101100100110101100000100110001000010110010010111010100111110010011001000001"
        "10011001010101101110101111110101100000111111000111111100101100001111011010011001001001101110101000001010000101"
        "01010001100101011010100001001001111100001100011110001000011001111100001110110111111111010011000111100100101010"
        "01100011100100101011100000001101111001011101111001010000000111110000111000000101110110001100111110111000011111"
        "11001110011101010010101111000101101111011010111111000010110101010011110101111001000100111111011001000001110111"
        "10010110010110010010111011111110100101101101111001010010000101111000001101000001011110010100110000100111110010"
        "11011101000001011011101110100001000010101010111000001010011110111001101100011001011111101011010110001111101000"
        "00011110101110001101110111010011110011001010101011001100101000000011101010110011000111101100100011110001110111"
        "01010010001000100011101110011111000100000100111100010011111001101100010100000100100010111010101111101110110000"
        "00101111111110111011110111010100100000010011010010001111100010110101001111111010100101010100110010000110000101"
        "00101101110110101011100111101110011011001101101100000101010101101000111101111111101011001001011100001001101101"
        "01101101110101010100111111111111100110101110001001001111101110010010101111011000111110101101010000011101010110"
        "11110110101111101010011100011011000111111000000101010001010011011101010100100111110101000111100011111111000111"
        "11100111010001101101101010110011100001110110111110110011111011001101011110011011110001010000111110101110000101"
        "01001111100010101100111101111010101010101000100011010100001001100110010110110110001111110101101111010011001011"
        "11101011100111101001101101011000100011101011100110110001011100100000001011011000100100110010001100011111011110"
        "10101111100001010011111010011100101011111001011010010111110001101011111100001110100100101010000001111000101111"
        "01100110101110011100011110101100000101000011100111101100110000000111000101101111111010001010100101111110111000"
        "11111111110100110111111111100000000101000111101000001011100101111011000011111010100111001001101000001101000101"
        "01001000000010111010011110000100011001111001101100001100111101100111001000011000111010000010000000110011100000"
        "10111000110100010010111110001010001101100110110001010100110001110111101000000000000010001010000001000111011101"
        "10010001111110011111111000111001101000110100111110010000110111110000000111110110111010110001110100011101010010"
        "00010001011101110111001001110001101100010000011001110111000111011110010101111000101000111110111111101010100000"
        "10110010011100101001011000000101111000110011000110011101100110010101010100001001110101110110101100000000000100"
        "00010111111011111101111011101010011011010011101011100110010011000000001110010001010001010001001001100011101001"
        "01111010110100000010011100000011000000100111111111010111010011011101011110110011110000000010110101111010101000"
        "00111001111010100100011011001101011110001100010110101010010101001100010001100101001111101100101100101011110000"
        "10010000111110110001111111111000000110110010101001101000100001111010110111110100000101010000011101000011011110"
        "11011111110111100001100100000111010011011110010010101101000100100111110000110011001101101000001100011010100101"
        "00011111001010111000001100100111000000001100001100010011111100100001001101011010110001101110000110011101111010"
        "11010010000010111110110111110110011010111111010001000011001000110110101001101111110010000011101011100001111101"
        "00101110011110000011110100100101101111101011100110001100000011011001111110110111110011000001100011000110011101"
        "00000010011100111010001101101100111100111001001011010101010011011100001110111100001000010111010100101101110101"
        "01010011100100101101000100000000100111110100111010101000000100100000001011100111010101101001010001010101010110"
        "00100110010001000100101000100000001000011100011101011000001000011100111010101011010110101011110100011011001010"
        "00011000111101001010110111010100011000101101101101000011011001001110101111010111100000110011111110010000000110"
        "11001100011111100001110111001101111101001001000100101100000001011101101110110111011101100101110000000000001001"
        "11101001001010110010100100001001110001100100010001111011110101000001011000111011001100000001111100010001000111"
        "00001000100000000001000000100110110100000101011101100100001000001010111110001111001010001000010100011011001101"
        "00010000111101001101110110000101111111110001010111100100110101110000100100001010111011110100101011100001001101"
        "00110111001110110000111110111110010011101000101011111110010001100010010110011010001110111100011011110101110110"
        "00110110011100100111100111110001011111110010110100100100001101110001010101100111001101000110100101100100010001"
        "10000000001011101111000111001110111001010101011110101001111010110111101101101101111100101111001001110011011001"
        "11011111010111010010011111001001011111100110000101001100101101110010111001110010110101000101001010001111000010"
        "00100101010011100111011111100001101010011001011011100100110001110101000001100100100101100111001010010000001110"
        "11110000010010000001011010010010111101111100110100100000001110000010101000101111010110011110001110001011001011";

    size_t base2 = 0, base8 = 0, base10 = 0, base16 = 0, base10tostr = 0;
    apa::bint b2int, b8int, b10int, b16int;

    std::cerr << "\nwarming up...\n";
    apa::factorial(5000);
    apa::fibonacci(10000);

    std::cerr << "\nbenchmarking start...\n";
    
    // base 2
    std::string bin_str = std::string(std::string("0b") + subject);
    std::cerr << "\nbase2 initialization...\n";
    for (size_t i = 0; i < RUNS; ++i) {
        auto start = std::chrono::high_resolution_clock::now();
        b2int = bin_str;
        auto end = std::chrono::high_resolution_clock::now();
        auto dur = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
        base2 += dur.count();
    }

    // base 8 initialization
    std::string oct_str = std::string(std::string("0o") + subject);
    std::cerr << "\nbase8 initialization...\n";
    for (size_t i = 0; i < RUNS; ++i) {
        auto start = std::chrono::high_resolution_clock::now();
        b8int = oct_str;
        auto end = std::chrono::high_resolution_clock::now();
        auto dur = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
        base8 += dur.count();
    }

    // base 10 initialization
    std::cerr << "\nbase10 initialization...\n";
    for (size_t i = 0; i < RUNS; ++i) {
        auto start = std::chrono::high_resolution_clock::now();
        b10int = subject;
        auto end = std::chrono::high_resolution_clock::now();
        auto dur = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
        base10 += dur.count();
    }

    // base 16 initialization
    std::string hex_str = std::string(std::string("0x") + subject);
    std::cerr << "\nbase16 initialization...\n";
    for (size_t i = 0; i < RUNS; ++i) {
        auto start = std::chrono::high_resolution_clock::now();
        b16int = hex_str;
        auto end = std::chrono::high_resolution_clock::now();
        auto dur = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
        base16 += dur.count();
    }

    // base 10 tostring
    std::string base10_toString;
    std::cerr << "\nbase10.to_base10_string()...\n";
    for (size_t i = 0; i < RUNS; ++i) {
        auto start = std::chrono::high_resolution_clock::now();
        base10_toString = b16int.to_base10_string();
        auto end = std::chrono::high_resolution_clock::now();
        auto dur = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
        base10tostr += dur.count();
    }

    std::cout << "### Using base 2<sup>" << sizeof(apa::limb_t) * 8
              << "</sup> number system representation.\n\n"
                 "string's size use to initialize = "
              << subject.size()
              << "\n\n"
                 "| cases | microseconds |\n"
                 "| ----- | ----------- |\n"
                 "| base 2 initialization | "
              << base2 / RUNS
              << " |\n"
                 "| base 8 initialization | "
              << base8 / RUNS
              << " |\n"
                 "| base 10 initialization | "
              << base10 / RUNS
              << " |\n"
                 "| base 16 initialization | "
              << base16 / RUNS
              << " |\n"
                 "| to_base10_string() | "
              << base10tostr / RUNS
              << " |\n\n"
                 "the to_base10_string() benchmark is from a "
              << b16int.limb_size() << " limbs size big integer\n\n";

    return 0;
}